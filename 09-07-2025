Path sum variants

problem : https://leetcode.com/problems/path-sum/description/
approach : recursively check each path from root to leaf node if the sum of values is equal to target value or not. or recursively reach leaf fromm root while subtracting the target value and check at lead node if current node value is equal to current target value or not
example:
      5
     / \
    4   8
   /   / \
 11  13  4
 / \       \
7   2       1
Recursion Tree for hasPathSum(root, 22)
Let's expand each call as a tree with indentation showing depth.

Call Stack:
bash
Copy
Edit
solve(5, 22, 0)
â”œâ”€â”€ sum = 0 + 5 = 5
â”œâ”€â”€ solve(4, 22, 5)
â”‚   â”œâ”€â”€ sum = 5 + 4 = 9
â”‚   â”œâ”€â”€ solve(11, 22, 9)
â”‚   â”‚   â”œâ”€â”€ sum = 9 + 11 = 20
â”‚   â”‚   â”œâ”€â”€ solve(7, 22, 20)
â”‚   â”‚   â”‚   â”œâ”€â”€ sum = 20 + 7 = 27 â†’ false
â”‚   â”‚   â””â”€â”€ solve(2, 22, 20)
â”‚   â”‚       â”œâ”€â”€ sum = 20 + 2 = 22 â†’ âœ… true
â”‚   â””â”€â”€ returns true
â””â”€â”€ solve(8, 22, 5)
    â”œâ”€â”€ sum = 5 + 8 = 13
    â”œâ”€â”€ solve(13, 22, 13)
    â”‚   â”œâ”€â”€ sum = 13 + 13 = 26 â†’ false
    â””â”€â”€ solve(4, 22, 13)
        â”œâ”€â”€ sum = 13 + 4 = 17
        â””â”€â”€ solve(1, 22, 17)
            â”œâ”€â”€ sum = 17 + 1 = 18 â†’ false
âœ… Final Result
The path 5 â†’ 4 â†’ 11 â†’ 2 gives sum 22, so hasPathSum() returns true.



code:
bool solve(TreeNode *root,int target,int sum){
       if(root == nullptr) return false;
        if(root ->left == NULL && root->right == NULL) {
            sum+= root->val;
            return (sum==target);
        }
       sum+= root->val;
    
       return (solve(root->left,target,sum) || solve(root->right,target,sum));
}
    bool hasPathSum(TreeNode* root, int targetSum) {
        return solve(root,targetSum,0);
    }
 problem : https://leetcode.com/problems/path-sum-ii/description/
approach same as above just keep data structures correctly
code:
void solve(TreeNode *root,int target,vector<int> &ds,vector<vector<int>> &ans){
        if(root == nullptr) return;
        ds.push_back(root->val);
        //if at leaf node
        if(!root->left && !root->right){
           if(root->val == target){
            ans.push_back(ds);
           }
            ds.pop_back();
            return;
        }
        target -= root->val;
        solve(root->left,target,ds,ans);
        solve(root->right,target,ds,ans);
        ds.pop_back();
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<int> ds;
        vector<vector<int>> ans;
        solve(root,targetSum,ds,ans);
        return ans;
    }
problem: https://leetcode.com/problems/binary-tree-maximum-path-sum/
approach: âœ… Approach: Postorder DFS (Bottom-Up Recursion)
ðŸ§  Key Idea:
At every node:

Compute max gain from left and right subtree.

The best path through this node is:
left + node + right.

The value returned up is:
node + max(left, right) (because parent can choose only one side to extend the path).

Update a global ans with the maximum path sum seen so far.

code :
int solve(TreeNode* root, int &ans) {
    if (!root) return 0;

    int l = max(0, solve(root->left, ans));  // Left max gain
    int r = max(0, solve(root->right, ans)); // Right max gain

    ans = max(ans, root->val + l + r);       // Max path through current node

    return root->val + max(l, r);            // Max gain to pass upward
}

int maxPathSum(TreeNode* root) {
    int ans = root->val;  // initialize with root val in case all are negative
    solve(root, ans);
    return ans;
}

